//@version=5
strategy("Reversal 2D Long Strategy", overlay = true, initial_capital=10000, default_qty_type = strategy.cash, default_qty_value = 100)//commission_value=0.075

trendBarsNumberInput = input.int(5, "Number of previous bars to compare with")
trendLength = trendBarsNumberInput * 2

barNumberFromTrendToReversalInput = input.int(10, "Number of bars allowed to wait from complete trend to reversal bar")

rollbackPriceGrowthPercentageInput = input.float(30.0, "Trend breaking price growth percentage", tooltip = "(high - l1)/(h1 - l1) > X%")
thinBarPercentageInput = input.float(0.15, "Price change percentage to ignore as thin bar", tooltip = "(open - close)/open < X%")

reversalBarLowerTailPercentageInput = input.float(30.0, "Reversal bar lower tail percentage of the body", tooltip = "(open - low)/(high - low) <= X%")
reversalBarVolumeFromInput = input.float(100, "Reversal bar volume from previous bar lower boundary", tooltip = "volume / volume[1] >= X%")
reversalBarVolumeToInput = input.float(200, "Reversal bar volume from previous bar upper boundary", tooltip = "volume / volume[1] <= X%")
reversalBarTopClosePercentageInput = input.float(5.0, "Opt B: Reversal bar close top percentage", tooltip = "high - close <= X%")
reversalBarfromPreviousPercentageInput = input.float(50.0, "Opt B: Whole reversal bar percentage from previos bar", tooltip = "(high - low)/(high[1] - low[1]) <= X%")

stopLossInput = input.float(1.0, "Stop Loss", tooltip = "Price movement percentage to close order")
takeProfitInput = input.float(1.0, "Take profit", tooltip = "Price movement percentage to close order")
timeAndDateInput = input.time(timestamp("01 Jan 2022 00:00"), "Date and time")
barIsLater = time > timeAndDateInput

//TODO exit when 20 consequent bars > sell price
//barsAboveEntryToCancelInput = input.int(10, "Number of consequent bars closing above sell entry to cancel position")

h1 = ta.highest(high, trendLength)
h1_offset = math.abs(ta.highestbars(high, trendLength))
lowestLength = (na(h1_offset) or h1_offset <= 0) ? 1 : h1_offset
l1 = ta.lowest(low, lowestLength)
l1_offset = math.abs(ta.lowestbars(low, lowestLength))


oppositeBar = close > open
thinBar = not oppositeBar and ((open - close)/open) * 100 <= thinBarPercentageInput
rollbackBar = oppositeBar and ((high - l1)/(h1 - l1)) * 100 > rollbackPriceGrowthPercentageInput
trendBar = not oppositeBar and not thinBar
c4A = false
c4B = false

barsSinceRollback = nz(ta.barssince(rollbackBar))
candleBody = open - close
trendBarsNumber = math.sum(trendBar ? 1 : 0, math.min(trendLength, math.max(nz(barsSinceRollback), 1)))

get(source, index) =>
    offset = bar_index - index
    offset <= 0 ? source : source[offset]

offset(index) =>
    if  bar_index <= index
        log.error("bar_index {0} less than index {1}", bar_index, index)
        1
    else
        index <= 0 ? (bar_index <= 1 ? 1 : bar_index - 1) : bar_index - index

//@function Displays text passed to `txt` when called.
debugLabel(price, txt) =>
    label.new(bar_index, high, text = txt, color=color.lime, style = label.style_label_lower_right, textcolor = color.black, size = size.large)
    //line.new(bar_index, price, bar_index + 1, price, color = color.teal, extend = extend.right, style = line.style_dashed)

//@variable Returns `color.green` when the strategy places the "buy" order, `color.orange` when it cancels the order.
color bgColor = na
//@variable Stop-loss price for exit commands.
var float stopLoss = na
//@variable Take-profit price for exit commands.
var float takeProfit = na
var float limitPrice = na
sellSignal = false

c2 = false
c2_index = 0
for i = 1 to barNumberFromTrendToReversalInput by 1

    if barsSinceRollback[i] > trendBarsNumberInput and trendBarsNumber[i] >= trendBarsNumberInput
        counter = trendLength
        sum = 0.0
        count = 0
        trendBarAvg = while counter > 0
            offset = i + 1 + trendLength - counter
            if trendBar[offset]
                sum := sum + candleBody[offset]
                count := count + 1
            counter := counter - 1
            if count >= trendBarsNumberInput
                break
            sum / count

        c2_avgCondition = candleBody[i] >= trendBarAvg
        //log.info("trendBarAvg {0}, {1}", trendBarAvg, candleBody[1])
        c2_lowerThirdCondition = ((close[i] - low[i])/(high[i] - low[i])) * 100 <= 30
        c2 := c2_avgCondition and c2_lowerThirdCondition
        if c2
            //log.info("Found c2, sum {0}, count {1}", math.sum(trendBar[1] ? candleBody[1] : 0, trendBarsNumberInput), math.sum(trendBar[1] ? 1 : 0, trendBarsNumberInput))
            //label.new(bar_index[i], high[i], "c2", style = label.style_label_down, color=color.gray, size = size.tiny)
            c2_index := bar_index[i]
            log.info("c2 {0}, at {1}, now {2}", c2, bar_index[i], bar_index)
            break

highestCloseAfterC2 = ta.highest(close[1], math.min(offset(c2_index + 1), barNumberFromTrendToReversalInput))
//at this point c2 is found withing 10 bars back, no close is below c2 open
c2_open = c2 ? get(open, c2_index): na
if c2 and trendBar[1] and highestCloseAfterC2 <= c2_open
    c3 = true
    log.info("c3 {0}, at {1}, now {2}", c3, bar_index[1], bar_index)

    limitPrice := close - syminfo.mintick * 2
    stopLoss := math.min(low - (high - low), low * (1 - stopLossInput/100))
    takeProfit := close * (1 + takeProfitInput/100)

    //Option A
    if c3 and oppositeBar
        c4_newLowCondition = low <= low[1]
        c4_higherQuarterCondition = ((high - close)/(high - low)) * 100 <=  25
        c4_priceCondition = low <= low[1] and c4_higherQuarterCondition and close >= open[1]
        c4_volumeCondition = (volume / volume[1]) * 100 >= reversalBarVolumeFromInput and (volume / volume[1]) * 100 <= reversalBarVolumeToInput
        c4_lowerTailCondition = ((open - low)/(high - low)) * 100 <= reversalBarLowerTailPercentageInput
        c4A := c4_priceCondition and c4_volumeCondition and c4_lowerTailCondition and c4_newLowCondition
        if c4A
            log.info("Found c4A")
            label.new(bar_index, low, "Buy (c4A)", style = label.style_label_up, color=color.yellow, size = size.normal)
            strategy.entry("buy", strategy.long, limit = limitPrice)
            strategy.exit("exit1", "buy", stop = stopLoss, limit = takeProfit)
            sellSignal := true
        else
            log.info("C4A conditions {0}, {1}, {2}, {3}, {4}", c4_higherQuarterCondition, c4_priceCondition, c4_volumeCondition, c4_lowerTailCondition, c4_newLowCondition)

    //Option B
    if c3 and oppositeBar
        c4_newLowCondition = low <= low[1]
        c4_closeToTopCondition = ((high - close)/(high - low)) * 100 <= reversalBarTopClosePercentageInput
        c4_priceCondition = ((high - low)/(high[1] - low[1])) * 100 <= reversalBarfromPreviousPercentageInput
        c4_volumeCondition = (volume / volume[1]) * 100 >= reversalBarVolumeFromInput and (volume / volume[1]) * 100 <= reversalBarVolumeToInput
        c4B := c4_newLowCondition and c4_closeToTopCondition and c4_priceCondition and c4_volumeCondition
        log.info("c4B conditions {0}, {1}, {2}, {3}", c4_newLowCondition, c4_closeToTopCondition, c4_priceCondition, c4_volumeCondition)
        if c4B
            log.info("Found c4B")
            label.new(bar_index, high, "Buy (c4B)", style = label.style_label_up, color=color.yellow, size = size.normal)
            strategy.entry("buy", strategy.long, limit = limitPrice)
            strategy.exit("exit1", "buy", stop = stopLoss, limit = takeProfit)
            sellSignal := true
        else
            log.info("C4A conditions {0}, {1}, {2}, {3}", c4_newLowCondition, c4_closeToTopCondition, c4_priceCondition, c4_volumeCondition)

else if c2
    log.info("trendBar[1] {0}, highestCloseAfterC2 {1}, c2_open {2}, c2_index {3}", trendBar[1], highestCloseAfterC2, c2_open, c2_index)

// Если следующим баром покупка не происходит, отменяем.
if sellSignal[1] == true and (close > limitPrice and open > limitPrice)
    strategy.cancel("buy")
    label.new(bar_index, high, "cancel", style = label.style_label_down, color=color.yellow, size = size.normal)
    //bgColor := color.new(color.orange, 50)


// Set `stopLoss` and `takeProfit` to `na` when price touches either, i.e., when the strategy simulates an exit.
if low <= stopLoss or high >= takeProfit
    stopLoss   := na
    takeProfit := na

//strategy.close_all()
// bgcolor(bgColor)